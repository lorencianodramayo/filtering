{"version":3,"sources":["components/Scroll.js","components/ErrorBoundry.js","components/Card.js","components/CardList.js","components/SearchList.js","containers/App.js","serviceWorker.js","index.js"],"names":["Scroll","props","style","overflowY","height","children","ErrorBoundry","state","hasError","this","setState","Component","Card","id","name","email","className","src","alt","CardList","robots","map","user","i","key","SearchList","searchField","searchChange","type","placeholder","onChange","App","onSearchChange","event","SearchRobots","target","value","fetch","then","response","json","users","filterRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gOAUeA,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAU,SAAUC,OAAO,MACnCH,EAAMI,WCcJC,E,kDAhBX,aAAc,IAAD,8BACT,gBACKC,MAAQ,CACTC,UAAS,GAHJ,E,gEAQTC,KAAKC,SAAS,CAACF,UAAS,M,+BAIxB,OAAOC,KAAKF,MAAMC,SAAW,8CAA0BC,KAAKR,MAAMI,a,GAb/CM,aCcZC,G,MAbF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,GAAGC,EAAgB,EAAhBA,KAAKC,EAAW,EAAXA,MACnB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAG,+BAA0BJ,EAA1B,YAAwCK,IAAI,aACpD,6BACI,4BAAKJ,GACL,2BAAIC,OCYLI,EAlBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACf,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAKC,GACb,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLV,GAAIO,EAAOG,GAAGV,GACdC,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,aCG9BU,EAdI,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC9B,OACI,yBAAKX,UAAU,OACX,2BACIA,UAAU,mCACVY,KAAK,SACLC,YAAY,cACZC,SAAUH,MCoCXI,E,kDAtCX,aAAc,IAAD,8BACT,gBAYJC,eAAiB,SAACC,GACd,EAAKvB,SAAS,CAACwB,aAAaD,EAAME,OAAOC,SAZzC,EAAK7B,MAAO,CACRa,OAAQ,GACRc,aAAc,IAJT,E,gEAOO,IAAD,OACfG,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAK/B,SAAS,CAACU,OAAOqB,S,+BAOpC,IAAD,EAC6BhC,KAAKF,MAA9Ba,EADJ,EACIA,OAAQc,EADZ,EACYA,aACVQ,EAAetB,EAAOuB,QAAO,SAAAC,GAC/B,OAAOA,EAAM9B,KAAK+B,cAAcC,SAASZ,EAAaW,kBAG1D,OAAQzB,EAAO2B,OAGP,yBAAK/B,UAAU,MACX,sCACA,kBAAC,EAAD,CAAYW,aAAclB,KAAKuB,iBAC/B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUZ,OAAQsB,OAPlC,wBAAI1B,UAAU,MAAd,mB,GAzBML,aCMEqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.3b048c59.chunk.js","sourcesContent":["import React from 'react'\n\nconst Scroll = (props) => {\n    return(\n        <div style={{overflowY:\"scroll\", height:600}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll","import React, { Component } from 'react'\n\nclass ErrorBoundry extends Component{\n    constructor(){\n        super();\n        this.state = {\n            hasError:false\n        }\n    }\n\n    componentDidCatch(){\n        this.setState({hasError:true})\n    }\n\n    render(){\n        return this.state.hasError ? <h1>Unable to load</h1> : this.props.children\n    }\n}\n\nexport default ErrorBoundry","import React from 'react'\nimport './Card.css'\n\nconst Card = ({id,name,email}) => {\n    return(\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img src={`https://robohash.org/${id}?200x200`} alt=\"robo cop\"></img>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\n\nexport default Card","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n    return (\n        <div>\n            {\n                robots.map((user,i)=>{\n                    return (\n                        <Card \n                            key={i} \n                            id={robots[i].id} \n                            name={robots[i].name} \n                            email={robots[i].email} \n                        />\n                    )\n                })\n            }\n        </div>\n    )\n}\nexport default CardList","import React from 'react'\n\nconst SearchList = ({searchField, searchChange}) => {\n    return(\n        <div className=\"pa2\">\n            <input \n                className=\"pa3 ba b--green bg-lightest-blue\"\n                type=\"search\" \n                placeholder=\"Search List\" \n                onChange={searchChange}\n            />\n        </div>\n        \n    )\n}\n\nexport default SearchList","import React, { Component } from 'react'\nimport Scroll from '../components/Scroll'\nimport ErrorBoundry from '../components/ErrorBoundry'\nimport CardList from '../components/CardList'\nimport SearchList from '../components/SearchList'\n\nclass App extends Component { \n    constructor(){\n        super()\n        this.state ={\n            robots: [],\n            SearchRobots: ''\n        }\n    }\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(users => this.setState({robots:users}))\n    }\n\n    onSearchChange = (event) => {\n        this.setState({SearchRobots:event.target.value})\n    }\n\n    render(){\n        const { robots, SearchRobots } = this.state;\n        const filterRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(SearchRobots.toLowerCase());\n        })\n\n        return !robots.length ?\n            <h1 className=\"tc\">Loading....</h1>:\n            (\n                <div className=\"tc\">\n                    <h1>Robots</h1>\n                    <SearchList searchChange={this.onSearchChange}></SearchList>\n                    <Scroll>\n                        <ErrorBoundry>\n                            <CardList robots={filterRobots}/>\n                        </ErrorBoundry>\n                    </Scroll>\n                </div>\n            )\n    }\n}\nexport default App ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}